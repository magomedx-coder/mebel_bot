from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from keyboards.main_menu import get_subcategory_menu, get_back_to_menu, get_products_menu, get_product_actions
from database.db import get_session, get_category_by_slug, list_products, get_product
from keyboards.product_kb import get_product_actions
router = Router()

NO_PRODUCTS_TEXT = """üì≠ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –º–µ–±–µ–ª–∏.

–ù–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ! –ù–∞—à –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–æ–≤—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏.
–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –∏ —Å–º–æ—Ç—Ä–µ—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""


@router.callback_query(F.data.startswith("category:"))
async def handle_category_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–±–µ–ª–∏"""
    category_slug = callback.data.split(":", 1)[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    keyboard = get_subcategory_menu(category_slug)
    if keyboard:
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:",
            reply_markup=keyboard
        )
        await callback.answer()
        return

    # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã
    async with get_session() as session:
        category = await get_category_by_slug(session, category_slug)
        if not category:
            await callback.message.edit_text(
                "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                reply_markup=get_back_to_menu()
            )
            await callback.answer()
            return
    
    if products.country:

        from aiogram import Router, F
        from aiogram.types import CallbackQuery
        from keyboards.main_menu import get_subcategory_menu, get_back_to_menu
        from database.db import get_session, get_category_by_slug, list_products

        router = Router()

        NO_PRODUCTS_TEXT = """üì≠ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –º–µ–±–µ–ª–∏.\n\n–ù–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ! –ù–∞—à –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–æ–≤—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏.\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –∏ —Å–º–æ—Ç—Ä–µ—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""

        @router.callback_query(F.data.startswith("category:"))
        async def handle_category_selection(callback: CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–±–µ–ª–∏"""
            category_slug = callback.data.split(":", 1)[1]
            keyboard = get_subcategory_menu(category_slug)
            if keyboard:
                await callback.message.edit_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:",
                    reply_markup=keyboard
                )
                await callback.answer()
                return
            async with get_session() as session:
                category = await get_category_by_slug(session, category_slug)
                if not category:
                    await callback.message.edit_text(
                        "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                        reply_markup=get_back_to_menu()
                    )
                    await callback.answer()
                    return
                products = await list_products(session, category_slug=category_slug)
                if not products:
                    await callback.message.edit_text(
                        NO_PRODUCTS_TEXT,
                        reply_markup=get_back_to_menu()
                    )
                else:
                    await callback.message.edit_text(
                        NO_PRODUCTS_TEXT,  # –í—Ä–µ–º–µ–Ω–Ω–æ, –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø–æ–∫–∞–∑ —Ç–æ–≤–∞—Ä–æ–≤
                        reply_markup=get_back_to_menu()
                    )
            await callback.answer()

        @router.callback_query(F.data.startswith("subcategory:"))
        async def handle_subcategory_selection(callback: CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–±–µ–ª–∏"""
            _, category_slug, subcategory = callback.data.split(":")
            async with get_session() as session:
                products = await list_products(session, category_slug=category_slug, subcategory=subcategory)
                if not products:
                    await callback.message.edit_text(
                        NO_PRODUCTS_TEXT,
                        reply_markup=get_back_to_menu()
                    )
                else:
                    await callback.message.edit_text(
                        NO_PRODUCTS_TEXT,  # –í—Ä–µ–º–µ–Ω–Ω–æ, –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø–æ–∫–∞–∑ —Ç–æ–≤–∞—Ä–æ–≤
                        reply_markup=get_back_to_menu()
                    )
            await callback.answer()
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    subcategory_slug = callback.data.split(":", 1)[1]
    
    with get_session() as session:
        subcategory = get_category_by_slug(session, subcategory_slug)
        if not subcategory:
            await callback.message.edit_text(
                "‚ùå –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                reply_markup=get_back_to_menu()
            )
            await callback.answer()
            return
        
        products = list_products(session, category_id=subcategory.id)
        if products:
            await callback.message.edit_text(
                f"üõãÔ∏è {subcategory.name}\n\n–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}",
                reply_markup=get_products_menu(subcategory_slug)
            )
        else:
            await callback.message.edit_text(
                f"üõãÔ∏è {subcategory.name}\n\n{NO_PRODUCTS_TEXT}",
                reply_markup=get_back_to_menu()
            )
    
    await callback.answer()


@router.callback_query(F.data.startswith("products:"))
async def handle_products_list(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    parts = callback.data.split(":")
    category_slug = parts[1]
    page = int(parts[2]) if len(parts) > 2 else 0
    
    with get_session() as session:
        category = get_category_by_slug(session, category_slug)
        if not category:
            await callback.message.edit_text(
                "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                reply_markup=get_back_to_menu()
            )
            await callback.answer()
            return
        
        products = list_products(session, category_id=category.id)
        limit = 5
        start_idx = page * limit
        end_idx = start_idx + limit
        page_products = products[start_idx:end_idx]
        
        if not page_products and page == 0:
            await callback.message.edit_text(
                f"üõãÔ∏è {category.name}\n\n{NO_PRODUCTS_TEXT}",
                reply_markup=get_back_to_menu()
            )
        else:
            text = f"üõãÔ∏è {category.name}\n\n"
            if len(products) > 1:
                text += f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {(len(products) + limit - 1) // limit}\n"
            text += f"–ü–æ–∫–∞–∑–∞–Ω–æ: {len(page_products)} –∏–∑ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤"
            
            await callback.message.edit_text(
                text,
                reply_markup=get(category_slug, page, limit)
            )
    
    await callback.answer()


@router.callback_query(F.data.startswith("product:"))
async def handle_product_detail(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–∞"""
    product_id = int(callback.data.split(":", 1)[1])
    
    with get_session() as session:
        product = get_product(session, product_id)
        if not product:
            await callback.message.edit_text(
                "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=get_back_to_menu()
            )
            await callback.answer()
            return
        
        text = product_card_text(product)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
        back_callback = "main_menu"
        if product.category.parent_id:
            # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            back_callback = f"products:{product.category.slug}"
        else:
            # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            back_callback = f"products:{product.category.slug}"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_product_actions(product_id, back_callback)
        )
    
    await callback.answer()
