from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from states.order_states import OrderForm, ConsultationForm, QuestionForm
from services.validators import validate_name, validate_phone, validate_text, format_phone
from database.db import get_session, get_product, create_lead
from keyboards.main_menu import get_back_to_menu

router = Router()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–∞
@router.callback_query(F.data.startswith("order:"))
async def start_order_form(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞"""
    product_id = int(callback.data.split(":", 1)[1])
    
    with get_session() as session:
        product = get_product(session, product_id)
        if not product:
            await callback.message.edit_text(
                "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=get_back_to_menu()
            )
            await callback.answer()
            return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–æ–≤–∞—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(product_id=product_id, product_title=product.title)
    
    await callback.message.edit_text(
        f"üõí –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞\n\n"
        f"–¢–æ–≤–∞—Ä: <b>{product.title}</b>\n\n"
        f"üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
    )
    
    await state.set_state(OrderForm.waiting_for_name)
    await callback.answer()


@router.message(OrderForm.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏"""
    name = message.text.strip()
    
    if not validate_name(name):
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è. –í–≤–µ–¥–∏—Ç–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞):"
        )
        return
    
    await state.update_data(name=name)
    await message.answer(
        "üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
    )
    
    await state.set_state(OrderForm.waiting_for_phone)


@router.message(OrderForm.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone = message.text.strip()
    
    if not validate_phone(phone):
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "+7XXXXXXXXXX, 8XXXXXXXXXX –∏–ª–∏ XXXXXXXXXX"
        )
        return
    
    formatted_phone = format_phone(phone)
    await state.update_data(phone=formatted_phone)
    
    await message.answer(
        "üí¨ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):"
    )
    
    await state.set_state(OrderForm.waiting_for_comment)


@router.message(OrderForm.waiting_for_comment)
async def process_comment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    comment = message.text.strip() if message.text else ""
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    with get_session() as session:
        lead = create_lead(
            session,
            name=data['name'],
            phone=data['phone'],
            product_id=data['product_id'],
            interest_type="order",
            comment=comment
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await message.answer(
        f"‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
        f"üì¶ –¢–æ–≤–∞—Ä: {data['product_title']}\n"
        f"üë§ –ò–º—è: {data['name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment if comment else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        f"üìã –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{lead.id}\n\n"
        f"–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.",
        reply_markup=get_back_to_menu()
    )
    
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
@router.callback_query(F.data.startswith("consultation:"))
async def start_consultation_form(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ñ–æ—Ä–º—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    product_id = int(callback.data.split(":", 1)[1])
    
    with get_session() as session:
        product = get_product(session, product_id)
        if not product:
            await callback.message.edit_text(
                "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=get_back_to_menu()
            )
            await callback.answer()
            return
    
    await state.update_data(product_id=product_id, product_title=product.title)
    
    await callback.message.edit_text(
        f"üìû –ó–∞–∫–∞–∑ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n\n"
        f"–¢–æ–≤–∞—Ä: <b>{product.title}</b>\n\n"
        f"üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
    )
    
    await state.set_state(ConsultationForm.waiting_for_name)
    await callback.answer()


@router.message(ConsultationForm.waiting_for_name)
async def process_consultation_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    name = message.text.strip()
    
    if not validate_name(name):
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è. –í–≤–µ–¥–∏—Ç–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞):"
        )
        return
    
    await state.update_data(name=name)
    await message.answer(
        "üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
    )
    
    await state.set_state(ConsultationForm.waiting_for_phone)


@router.message(ConsultationForm.waiting_for_phone)
async def process_consultation_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    phone = message.text.strip()
    
    if not validate_phone(phone):
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "+7XXXXXXXXXX, 8XXXXXXXXXX –∏–ª–∏ XXXXXXXXXX"
        )
        return
    
    formatted_phone = format_phone(phone)
    await state.update_data(phone=formatted_phone)
    
    await message.answer(
        "üí¨ –û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:"
    )
    
    await state.set_state(ConsultationForm.waiting_for_question)


@router.message(ConsultationForm.waiting_for_question)
async def process_consultation_question(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    question = message.text.strip()
    
    if not validate_text(question, min_length=5, max_length=500):
        await message.answer(
            "‚ùå –í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –¥–ª–∏–Ω–Ω—ã–π (5-500 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    data = await state.get_data()
    
    with get_session() as session:
        lead = create_lead(
            session,
            name=data['name'],
            phone=data['phone'],
            product_id=data['product_id'],
            interest_type="consultation",
            comment=question
        )
    
    await message.answer(
        f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n"
        f"üì¶ –¢–æ–≤–∞—Ä: {data['product_title']}\n"
        f"üë§ –ò–º—è: {data['name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üí¨ –í–æ–ø—Ä–æ—Å: {question}\n\n"
        f"üìã –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: #{lead.id}\n\n"
        f"–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.",
        reply_markup=get_back_to_menu()
    )
    
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
@router.callback_query(F.data.startswith("question:"))
async def start_question_form(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ñ–æ—Ä–º—ã –≤–æ–ø—Ä–æ—Å–∞"""
    product_id = int(callback.data.split(":", 1)[1])
    
    with get_session() as session:
        product = get_product(session, product_id)
        if not product:
            await callback.message.edit_text(
                "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=get_back_to_menu()
            )
            await callback.answer()
            return
    
    await state.update_data(product_id=product_id, product_title=product.title)
    
    await callback.message.edit_text(
        f"üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n\n"
        f"–¢–æ–≤–∞—Ä: <b>{product.title}</b>\n\n"
        f"üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
    )
    
    await state.set_state(QuestionForm.waiting_for_question)
    await callback.answer()


@router.message(QuestionForm.waiting_for_question)
async def process_question(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞"""
    question = message.text.strip()
    
    if not validate_text(question, min_length=5, max_length=500):
        await message.answer(
            "‚ùå –í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –¥–ª–∏–Ω–Ω—ã–π (5-500 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    data = await state.get_data()
    
    with get_session() as session:
        lead = create_lead(
            session,
            name="–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            phone="–ù–µ —É–∫–∞–∑–∞–Ω",
            product_id=data['product_id'],
            interest_type="question",
            comment=question
        )
    
    await message.answer(
        f"‚úÖ –í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n"
        f"üì¶ –¢–æ–≤–∞—Ä: {data['product_title']}\n"
        f"üí¨ –í–æ–ø—Ä–æ—Å: {question}\n\n"
        f"üìã –ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞: #{lead.id}\n\n"
        f"–ú—ã –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        reply_markup=get_back_to_menu()
    )
    
    await state.clear()